# COVID_systematics_ID_Deliver.py
#
# This is a Python 3.9 code to read the complete series of RCMFSTATS generated by
# the cmf_profile.py script, check for columnwise systematics using Brian's 
# approach, then compare the results to the curated systematics (COVID_systematics.txt)
# generated manually for the AVIRIS-NG flights during the COVID 2020 campaign.
#
# Creation Date: 2022-06-22
# Last Modified: 2022-06-22
#
# by Michael J. Garay
# (Michael.J.Garay@jpl.nasa.gov)

# Import packages

import glob
from netCDF4 import Dataset
import matplotlib.pyplot as plt
import numpy as np
import os
import pandas as pd

def main():  # Main code

# Set the paths
# NOTE: datapath is the location of the curated systematics (COVID_systematics.txt) file
#       basepath is the location of the *_column_stats.csv files
#       outpath is the location of the output file

    datapath = '/Users/mgaray/Desktop/CODING/PYTHON/PY39/JUN22/METHANE/DELIVER/'
    basepath = '/Users/mgaray/Desktop/DATA/METHANE/RCMFSTATS/COVID/CURATED/'
    outpath = '/Users/mgaray/Desktop/CODING/PYTHON/PY39/JUN22/METHANE/DELIVER/'

# Set the parameters of the systematics detection

    ncols = 598  # There are 598 AVIRIS-NG columns
    nadj_col = 3  # Number of adjacent columns in running median
    nsigma_col = 3  # Number of standard deviations

### Find the systematics file

# Change to the correct directory

    os.chdir(datapath)

# Get the text file listing

    search_str = "COVID_systematics.txt"  
    file_list = glob.glob(search_str)
    
    if(len(file_list) < 1):
        print()
        print("***ERROR***")
        print("Missing systematics file (COVID_systematics.txt)")
        print("Please check datapath")
        print("***ERROR***")
        print()
        print(error)

# Set blank arrays to store the data

    file_raw = []
    systematics_raw = []
    
# Open the file

    inputFile = open(file_list[0], 'r')
    print('Reading: ',file_list[0])   

# Read the data file

    for line in inputFile:

# Parse the line
# NOTE: The contents are the file name and a float designating the systematics
#       0 = None
#       0.5 = Maybe
#       1 = Weak
#       2 = Severe
    
        words = line.split(',')
        
        file_temp = words[0]
        systematics_temp = float(words[1])
        
# Store the data

        file_raw.append(file_temp)
        systematics_raw.append(systematics_temp)
    
# Close the input file

    inputFile.close()    
    
# Convert the data to numpy arrays

    file_name = np.array(file_raw)
    systematics = np.array(systematics_raw)
    
# Output some statistics

    count_tot = len(systematics)
    
    none = (systematics == 0)
    keep = systematics[none]
    count_none = len(keep)
    
    maybe = (systematics == 0.5)
    keep = systematics[maybe]
    count_maybe = len(keep)
    
    weak = (systematics == 1.0)
    keep = systematics[weak]
    count_weak = len(keep)
    
    strong = (systematics == 2.0)
    keep = systematics[strong]
    count_strong = len(keep)
    
    print()
    print("***COVID RAW STATISTICS***")
    out_text = "       Total Files = "+"{0:.0f}".format(count_tot)
    print(out_text)
    out_text = "    No Systematics = "+"{0:.0f}".format(count_none)
    print(out_text)
    out_text = " Maybe Systematics = "+"{0:.0f}".format(count_maybe)
    print(out_text)
    out_text = "  Weak Systematics = "+"{0:.0f}".format(count_weak)
    print(out_text)
    out_text = "Strong Systematics = "+"{0:.0f}".format(count_strong)
    print(out_text)
    print("*************************")
    print()

### Locate the RCMFSTATS data

# Change to the correct directory

    os.chdir(basepath)

# Get the text file listing
# NOTE: This will likely not give an ordered list

    search_str = "ang*_clip_column_stats.csv"
    dum_list = glob.glob(search_str)
    raw_list = np.array(dum_list)  # Convert to a numpy array
    
# Get the number of files
    
    num_files = len(raw_list)
        
# Loop through files and sort by date

    date_raw = np.zeros((num_files),dtype=int)

    for loop in range(num_files):
    
# Select appropriate file

        this_file = raw_list[loop]

# Parse the filename to get information
    
        words = this_file.split('_')
        temp = words[0]
        words = temp.split('g')
        temp = words[1]
        words = temp.split('t')
        hold = words[0]+words[1]

        date_raw[loop] = int(hold)

# Sort the files

    sorted = np.argsort(date_raw)
    csv_list = raw_list[sorted]
    date_list = date_raw[sorted]

    num_csv = len(csv_list)
    print('Number of Files: ',num_csv)
    
# Check for the correct number of files

    if(num_csv != count_tot):
        print()
        print("***ERROR***")
        print("INCORRECT NUMBER OF FILES")
        print("Expected: ",count_tot)
        print("   Found: ",num_csv)
        print("***ERROR***")
        print(error)
        
# Set arrays to store the results

    result = np.zeros_like(systematics)
               
### LOOP THROUGH THE FILES

    for loop in range(num_csv):
#    for loop in range(10):

# Change to the correct directory (needs to be within the loop)
    
        os.chdir(basepath)

# Set up arrays to store the data
    
        npix = np.zeros((ncols))  # Number of pixels
        med = np.zeros((ncols))  # Median value of column
        mad = np.zeros((ncols))  # Mean absolute difference
        p05 = np.zeros((ncols))  # 5th percentile
        p95 = np.zeros((ncols))  # 95th percentile
    
# Select appropriate file

        this_file = csv_list[loop]
        
# Open the file

        inputFile = open(csv_list[loop], 'r')
#        print('Reading: ',csv_list[loop])
#        print(file_name[loop])
    
# Read the data file

        med_sum = 0.0
        med_count = 0.0
        data_count = 0
        
        for line in inputFile:
        
            if(data_count > 0):
                words = line.split(',')
                
                npix[data_count-1] = float(words[0])
                med[data_count-1] = float(words[1])
                mad[data_count-1] = float(words[2])
                p05[data_count-1] = float(words[3])
                p95[data_count-1] = float(words[4].rstrip())  # Remove newline
            
            data_count = data_count+1
        
# Close the input file

        inputFile.close()
        
### TEST THE DATA FOR SYSTEMATICS
        
        ser_med = pd.Series(med,copy=False)
        ser_mad = pd.Series(mad,copy=False)
        
        adj_col_median = ser_med.rolling(nadj_col,center=True).median()
        
        hold = np.count_nonzero(ser_med - adj_col_median > nsigma_col*ser_med.mad())
        
        result[loop] = hold
        
#        print(systematics[loop])
#        print(hold)
        
# Rescale the results

    keep = (result > 1)
    result[keep] = 1

### ANALYZE THE RESULTS

# NO SYSTEMATICS (STRICT)
    
    tp_none = (systematics == 0) & (result == 0)
    keep = systematics[tp_none]
    count_none_tp = len(keep)
    
    fp_none = (systematics == 0) & (result != 0)
    keep = systematics[fp_none]
    count_none_fp = len(keep)
    
    tn_none = (systematics != 0) & (result != 0)
    keep = systematics[tn_none]
    count_none_tn = len(keep)
    
    fn_none = (systematics != 0) & (result == 0)
    keep = systematics[fn_none]
    count_none_fn = len(keep)

# NO SYSTEMATICS (LOOSE)
    
    tp_any = (systematics < 1) & (result < 1)
    keep = systematics[tp_any]
    count_any_tp = len(keep)
    
    fp_any = (systematics < 1) & (result >= 1)
    keep = systematics[fp_any]
    count_any_fp = len(keep)
    
    tn_any = (systematics >= 1) & (result >= 1)
    keep = systematics[tn_any]
    count_any_tn = len(keep)
    
    fn_any = (systematics >= 1) & (result < 1)
    keep = systematics[fn_any]
    count_any_fn = len(keep)
    
# STRONG SYSTEMATICS
    
    tp_strong = (systematics == 2) & (result > 0)
    keep = systematics[tp_strong]
    count_strong_tp = len(keep)
    
# WEAK SYSTEMATICS
    
    tp_weak = (systematics == 1) & (result > 0)
    keep = systematics[tp_weak]
    count_weak_tp = len(keep)
 
# MAYBE SYSTEMATICS
    
    tp_maybe = (systematics == 0.5) & (result < 1)
    keep = systematics[tp_maybe]
    count_maybe_tp = len(keep)
       
    print()
    print("***STRICT COVID TEST STATISTICS***")
    out_text = "No Systematics (True Positive) = "+"{0:.0f}".format(count_none_tp)
    print(out_text)
    out_text = "No Systematics (False Positive) = "+"{0:.0f}".format(count_none_fp)
    print(out_text)
    out_text = "Any Systematics (False Positive) = "+"{0:.0f}".format(count_none_fn)
    print(out_text)
    out_text = "Any Systematics (True Positive) = "+"{0:.0f}".format(count_none_tn)
    print(out_text)
    print()
    print("***LOOSE (INCLUDING MAYBES) COVID TEST STATISTICS***")
    out_text = "No Systematics (True Positive) = "+"{0:.0f}".format(count_any_tp)
    print(out_text)
    out_text = "No Systematics (False Positive) = "+"{0:.0f}".format(count_any_fp)
    print(out_text)
    out_text = "Any Systematics (False Positive) = "+"{0:.0f}".format(count_any_fn)
    print(out_text)
    out_text = "Any Systematics (True Positive) = "+"{0:.0f}".format(count_any_tn)
    print(out_text)
    print()
    
    print("******")
    out_text = "Strong Systematics (True Positive) = "+"{0:.0f}".format(count_strong_tp)
    print(out_text)
    out_text = "Weak Systematics (True Positive) = "+"{0:.0f}".format(count_weak_tp)
    print(out_text)
    out_text = "Maybe Systematics (True Positive) = "+"{0:.0f}".format(count_maybe_tp)
    print(out_text)
    print()
   
# Tell user completion was successful

    print("\nSuccessful Completion\n")

### END MAIN FUNCTION


if __name__ == '__main__':
    main()    